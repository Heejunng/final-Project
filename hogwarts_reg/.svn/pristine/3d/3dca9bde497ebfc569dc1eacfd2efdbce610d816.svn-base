/**
 * 
 */
package edu.hogwarts.hogwartsreg.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import edu.hogwarts.hogwartsreg.dao.SubjectDAO;
import edu.hogwarts.hogwartsreg.vo.SubjectVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 개설강의 관리 구현 클래스: 장바구니, 수강신청, 시간표
 * @author Hogwarts
 *
 */
@Service
@Slf4j
public class CourseServiceImpl implements CourseService {
	
	@Autowired
	private DataSourceTransactionManager transactionManager;
	
	@Autowired
	private SubjectDAO subjectDAO;

	@Override
	@Transactional(readOnly = true) // 읽기만 하는 것
	public List<SubjectVO> getAllSubject() {
		log.info("CourseService.getAllSubject");
		List<SubjectVO> subjects = null;
		TransactionStatus txStatus = transactionManager.getTransaction(new DefaultTransactionDefinition());

		try {
			subjects = subjectDAO.getAllSubject();
			transactionManager.commit(txStatus);
		} catch (Exception e) {
			transactionManager.rollback(txStatus); throw e; }
		 
		return subjects;
	}

	@Override
	@Transactional(readOnly = true) // 읽기만 하는 것
	public SubjectVO getSubjectBySubCode(int subCode) {
		log.info("CourseService.getSubjectBySubCode");
		SubjectVO subjectVO = null;
		TransactionStatus txStatus = transactionManager.getTransaction(new DefaultTransactionDefinition());

		try {
			subjectVO = subjectDAO.getSubjectBySubCode(subCode);
			transactionManager.commit(txStatus);
		} catch (Exception e) {
			transactionManager.rollback(txStatus); throw e; }
		 
		return subjectVO;
	}
	
	/*
	@Override
	@Transactional(readOnly = true) // 읽기만 하는 것
	public SubjectVO getSubject(String subName, String daytime) {
		log.info("CourseService.getSubject");
		SubjectVO subjectVO = null;
		TransactionStatus txStatus = transactionManager.getTransaction(new DefaultTransactionDefinition());

		try {
			subjectVO = subjectDAO.getSubject(subName, daytime);
			transactionManager.commit(txStatus);
		} catch (Exception e) {
			transactionManager.rollback(txStatus); throw e; }
		 
		return subjectVO;
	}

	
	@Override
	@Transactional(readOnly = true) // 읽기만 하는 것
	public SubjectVO getProfessor(String professor, String daytime) {
		log.info("CourseService.getProfessor");
		SubjectVO subjectVO = null;
		TransactionStatus txStatus = transactionManager.getTransaction(new DefaultTransactionDefinition());

		try {
			subjectVO = subjectDAO.getProfessor(professor, daytime);
			transactionManager.commit(txStatus);
		} catch (Exception e) {
			transactionManager.rollback(txStatus); throw e; }
		 
		return subjectVO;
	}

	
	
	@Override
	@Transactional(readOnly = true) // 읽기만 하는 것
	public SubjectVO getDaytime(String daytime) {
		log.info("CourseService.getDaytime");
		SubjectVO subjectVO = null;
		TransactionStatus txStatus = transactionManager.getTransaction(new DefaultTransactionDefinition());

		try {
			subjectVO = subjectDAO.getDaytime(daytime);
			transactionManager.commit(txStatus);
		} catch (Exception e) {
			transactionManager.rollback(txStatus); throw e; }
		 
		return subjectVO;
	}
	*/
	@Override
	@Transactional(readOnly = true) // 읽기만 하는 것
	public SubjectVO getSubjectBySubName(String subName){
		log.info("CourseService.getSubjectBySubName");
		SubjectVO subjectVO = null;
		TransactionStatus txStatus = transactionManager.getTransaction(new DefaultTransactionDefinition());

		try {
			subjectVO = subjectDAO.getSubjectBySubName(subName);
			transactionManager.commit(txStatus);
		} catch (Exception e) {
			transactionManager.rollback(txStatus); throw e; }
		 
		return subjectVO;
	}

}
